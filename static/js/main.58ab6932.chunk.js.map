{"version":3,"sources":["hooks/useObservable.ts","services/MetricsStore.ts","components/Charts.tsx","services/FileStore.ts","components/FileDropZone.tsx","App.tsx","reportWebVitals.ts","setupVendorLibraries.ts","index.tsx"],"names":["useObservable","observableGenerator","deps","initialValue","React","useState","value","setValue","cb","useCallback","useEffect","o","undefined","sub","subscribe","error","err","console","next","unsubscribe","MetricsStoreContext","createContext","MetricsStore","fileStore","customerDataTimeZone$$","BehaviorSubject","bloodGlucose$","combineLatest","this","filesByType$","pipe","concatMap","files","customerDataTimeZone","of","Promise","resolve","a","csvs","map","file","data","atob","bytes","Uint8Array","length","i","charCodeAt","TextDecoder","decode","replaceAll","all","parseBloodGlucoseCsv","timeValuesArr","timeValues","reduce","acc","m","Object","keys","timeStr","str","tz","time","moment","valueOf","sort","b","fn","input","accept","reject","csvParse","split","slice","join","columns","records","result","record","parseValue","parseFloat","isNaN","metricValuesToHighchartsPairs","ms","ChartsContainer","styled","div","ChartsHeading","h1","DateRangePickerContainer","PageGroup","ChartContainer","ChartHeading","h2","Chart","Charts","timezone","divProps","metricsStore","useContext","dayFilter","setDayFilter","overallBloodGlucose","overallHighchartsOptions","useMemo","chart","height","margin","style","fontFamily","type","colors","credits","enabled","legend","plotOptions","series","gapSize","gapUnit","marker","name","title","text","xAxis","dateTimeLabelFormats","day","week","yAxis","tickInterval","createHighchartsOptionsOverall","dailyBloodGlucose","_","chain","groupBy","format","toPairs","sortBy","minMaxDay","nDays","dailyHighchartsOptions","chunk","filter","startDate","endDate","dayMoment","isSameOrAfter","isSameOrBefore","xMinMax","max","endOf","toDate","getTime","min","startOf","yMax","Math","d","yMinMax","ceil","hidden","options","createHighchartsOptionsForDay","highcharts","Highcharts","minDate","maxDate","moveRangeOnFirstSelection","onChange","range","selection","ranges","key","showSelectionPreview","pageGroup","concat","Array","fill","events","className","values","p","dayMax","dayAvg","round","v","dayMin","labels","render","forEach","l","destroy","chartPaddingTop","attrs","zIndex","maxLabel","renderer","add","attr","x","y","maxValue","toString","labelX","avgLabel","avgValue","push","radius","plotBands","color","from","to","plotLines","compact","dashStyle","width","FileStoreContext","FileStore","files$$","files$","asObservable","fs","f","fileList","unsupported","fileListItem","item","preProcessFileData","arrayBuffer","url","fetch","response","contentType","headers","get","uniqBy","readData","resolveFileType","buffer","btoa","byte","String","fromCharCode","size","byteLength","startsWith","endsWith","Container","FileDropZone","children","fileService","fileUploadEl","setFileUploadEl","handleSelectFiles","preProcessFiles","preProcessed","acceptFiles","onClick","click","onDragOver","ev","preventDefault","stopPropagation","onDrop","dataTransfer","cursor","multiple","target","ref","el","display","GlobalStyle","createGlobalStyle","reset","Fullscreen","App","dataUrl","csvFiles","preProcessUrl","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","brokenAxis","URLSearchParams","window","location","search","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58ab6932.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Observable } from 'rxjs';\n\nexport type ObserverFunction<T> = () => Observable<T> | undefined;\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n): [T | undefined];\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue: T,\n): [T];\n\n/**\n * A custom hook that exposes an observable as its latest emitted value.\n *\n * @param observableGenerator A factory function for the observable\n * @param deps The dependency array. When any of these dependencies changes, the observable will\n *   be regenerated.\n * @param initialValue The initial value of the observable value, before it emits its first value.\n *   When the dependency array changes, the value will not revert to the initial value.\n * @returns\n */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue?: T,\n): [typeof initialValue] {\n  const [value, setValue] = React.useState<T | typeof initialValue>(\n    initialValue,\n  );\n  const cb = React.useCallback(observableGenerator, deps);\n\n  /** When the callback changes, reinvoke it and subscribe to the new observable. */\n  React.useEffect(() => {\n    const o = cb();\n    if (o !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      const sub = o.subscribe({\n        // eslint-disable-next-line no-console\n        error: (err) => console.error(err),\n        next: setValue,\n      });\n      return () => sub.unsubscribe();\n    }\n  }, [cb]);\n\n  return [value];\n}\n","import csvParse from 'csv-parse';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nimport { FileStore } from './FileStore';\n\nexport type MetricValue<T> = {\n  time: number;\n  value: T;\n};\n\ntype CsvRecord = {\n  'Device Timestamp': string;\n  'Record Type': string;\n  'Historic Glucose mmol/L': string;\n  'Scan Glucose mmol/L': string;\n};\n\nexport const MetricsStoreContext = React.createContext<MetricsStore>(\n  (undefined as unknown) as MetricsStore,\n);\n\nexport class MetricsStore {\n  public static metricValuesToHighchartsPairs = <T>(\n    ms: MetricValue<T>[] | undefined,\n  ): [number, T][] | undefined => {\n    return ms !== undefined\n      ? ms.map(({ time, value }) => [time, value])\n      : undefined;\n  };\n\n  private customerDataTimeZone$$ = new BehaviorSubject('America/Toronto');\n\n  constructor(private readonly fileStore: FileStore) {}\n\n  /** Observe changes to the blood glucose metrics. */\n  public readonly bloodGlucose$: Observable<\n    MetricValue<number>[] | undefined\n  > = combineLatest([\n    this.fileStore.filesByType$('csv'),\n    this.customerDataTimeZone$$,\n  ])\n    .pipe(\n      concatMap(([files, customerDataTimeZone]) =>\n        of<() => Promise<MetricValue<number>[] | undefined>>(\n          () => Promise.resolve(undefined),\n          async () => {\n            const csvs = files.map((file) => {\n              const data = atob(file.data);\n              const bytes = new Uint8Array(data.length);\n              for (let i = 0; i < data.length; i++) {\n                bytes[i] = data.charCodeAt(i);\n              }\n              return new TextDecoder('utf-8')\n                .decode(bytes)\n                .replaceAll('\\r\\n', '\\n');\n            });\n            const timeValuesArr: Record<string, number>[] = await Promise.all(\n              csvs.map(parseBloodGlucoseCsv),\n            );\n            const timeValues = timeValuesArr.reduce(\n              (acc, m) => ({ ...acc, ...m }),\n              {},\n            );\n            return Object.keys(timeValues)\n              .map((timeStr) => {\n                const value = timeValues[timeStr];\n                const time = parseTime(timeStr, customerDataTimeZone);\n                return { time, value };\n              })\n              .sort((a, b) => a.time - b.time);\n          },\n        ),\n      ),\n    )\n    .pipe(concatMap((fn) => fn()));\n}\n\nfunction parseBloodGlucoseCsv(input: string): Promise<Record<string, number>> {\n  return new Promise((accept, reject) => {\n    csvParse(\n      input.split('\\n').slice(1).join('\\n'),\n      { columns: true },\n      (err, records: CsvRecord[]) => {\n        if (err !== undefined) {\n          return reject(err);\n        }\n\n        const result: Record<string, number> = {};\n        for (const record of records) {\n          const value = parseValue(record);\n          if (value !== undefined) {\n            result[record['Device Timestamp']] = value;\n          }\n        }\n\n        accept(result);\n      },\n    );\n  });\n}\n\nfunction parseTime(str: string, tz: string): number {\n  return moment.tz(str, 'DD-MM-YYYY HH:mm', tz).valueOf();\n}\n\nfunction parseValue(record: CsvRecord): number | undefined {\n  const value =\n    record['Record Type'] === '0'\n      ? parseFloat(record['Historic Glucose mmol/L'])\n      : parseFloat(record['Scan Glucose mmol/L']);\n  if (!isNaN(value)) {\n    return value;\n  } else {\n    return undefined;\n  }\n}\n","import * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { DateRangePicker, Range } from 'react-date-range';\nimport { map } from 'rxjs/operators';\nimport styled from 'styled-components';\n\nimport { useObservable } from '../hooks/useObservable';\nimport { MetricsStore, MetricsStoreContext } from '../services/MetricsStore';\n\nconst nChartsPerPage = 3;\n\nconst ChartsContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ChartsHeading = styled.h1`\n  font-size: 2em;\n  padding: 25px;\n  @media print {\n    display: none;\n  }\n`;\n\nconst DateRangePickerContainer = styled.div`\n  padding: 25px;\n  @media print {\n    display: none;\n  }\n`;\n\nconst PageGroup = styled.div`\n  break-after: always;\n  break-inside: avoid;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 11in;\n\n  @media print {\n    height: 8.3in;\n    margin-bottom: 0.2in;\n  }\n`;\n\nconst ChartContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 20px;\n\n  &.hidden {\n    display: none;\n  }\n\n  @media print {\n    &.hidden {\n      display: flex;\n      visibility: hidden;\n    }\n  }\n`;\n\nconst ChartHeading = styled.h2`\n  font-weight: 600;\n  margin: 5px 0 0 0;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nconst Chart = styled.div`\n  flex: 1;\n`;\n\ntype DayData = {\n  day: string;\n  data: [number, number][];\n};\n\nexport type ChartsProps = React.HTMLAttributes<HTMLDivElement> & {\n  timezone: string;\n};\n\nexport const Charts: React.FC<ChartsProps> = ({ timezone, ...divProps }) => {\n  const metricsStore = React.useContext(MetricsStoreContext);\n  const [dayFilter, setDayFilter] = React.useState<Range>();\n\n  const [overallBloodGlucose] = useObservable(\n    () =>\n      metricsStore.bloodGlucose$.pipe(\n        map(MetricsStore.metricValuesToHighchartsPairs),\n      ),\n    [metricsStore],\n  );\n  const overallHighchartsOptions = React.useMemo(\n    () =>\n      overallBloodGlucose !== undefined\n        ? createHighchartsOptionsOverall(timezone, overallBloodGlucose)\n        : undefined,\n    [overallBloodGlucose, timezone],\n  );\n  const dailyBloodGlucose = React.useMemo(() => {\n    if (overallBloodGlucose !== undefined) {\n      return _.chain(overallBloodGlucose)\n        .groupBy(([time]) => moment(time).tz(timezone).format('YYYY-MM-DD'))\n        .toPairs()\n        .map(([day, data]) => ({ data, day }))\n        .sortBy('day')\n        .value();\n    } else {\n      return undefined;\n    }\n  }, [overallBloodGlucose, timezone]);\n  const minMaxDay = React.useMemo(() => {\n    if (dailyBloodGlucose !== undefined) {\n      const nDays = dailyBloodGlucose.length;\n      if (nDays > 0) {\n        return [\n          moment(dailyBloodGlucose[0].day, 'YYYY-MM-DD').tz(timezone),\n          moment(dailyBloodGlucose[nDays - 1].day, 'YYYY-MM-DD').tz(timezone),\n        ];\n      } else {\n        return undefined;\n      }\n    }\n  }, [dailyBloodGlucose, timezone]);\n  const dailyHighchartsOptions = React.useMemo(() => {\n    if (dailyBloodGlucose !== undefined) {\n      const filter = ({ day }: DayData) => {\n        if (\n          dayFilter !== undefined &&\n          dayFilter.startDate !== undefined &&\n          dayFilter.endDate !== undefined\n        ) {\n          const dayMoment = moment(day, 'YYYY-M-DD').tz(timezone);\n          return (\n            dayMoment.isSameOrAfter(dayFilter.startDate) &&\n            dayMoment.isSameOrBefore(dayFilter.endDate)\n          );\n        } else {\n          return true;\n        }\n      };\n\n      return _.chunk(\n        dailyBloodGlucose.filter(filter).map(({ data, day }) => {\n          const m = moment.tz(day, timezone);\n          const xMinMax = {\n            max: m.endOf('day').toDate().getTime(),\n            min: m.startOf('day').toDate().getTime(),\n          };\n          const yMax = Math.min(Math.max(8, ...data.map((d) => d[1])), 12);\n          const yMinMax = {\n            max: Math.ceil(yMax * 2) / 2,\n            min: 3,\n          };\n          return {\n            hidden: false,\n            options: createHighchartsOptionsForDay(\n              timezone,\n              data,\n              xMinMax,\n              yMinMax,\n            ),\n            title: m.format('dddd, MMMM Do YYYY'),\n          };\n        }),\n        nChartsPerPage,\n      );\n    } else {\n      return undefined;\n    }\n  }, [dailyBloodGlucose, dayFilter, timezone]);\n\n  return (\n    <ChartsContainer {...divProps}>\n      <ChartsHeading>Overall</ChartsHeading>\n      {overallHighchartsOptions !== undefined ? (\n        <PageGroup key={`page-group-overall`}>\n          <ChartContainer>\n            <Chart>\n              <HighchartsReact\n                highcharts={Highcharts}\n                options={overallHighchartsOptions}\n              />\n            </Chart>\n          </ChartContainer>\n        </PageGroup>\n      ) : undefined}\n      <ChartsHeading>Daily</ChartsHeading>\n      {minMaxDay !== undefined\n        ? (() => {\n            const [minDate, maxDate] = minMaxDay.map((m) => m.toDate());\n            return (\n              <DateRangePickerContainer>\n                <DateRangePicker\n                  maxDate={maxDate}\n                  minDate={minDate}\n                  moveRangeOnFirstSelection={false}\n                  onChange={(range) => {\n                    if ('selection' in range) {\n                      setDayFilter(range.selection);\n                    }\n                  }}\n                  ranges={[\n                    dayFilter === undefined\n                      ? {\n                          endDate: maxDate,\n                          key: 'selection',\n                          startDate: minDate,\n                        }\n                      : dayFilter,\n                  ]}\n                  showSelectionPreview={true}\n                />\n              </DateRangePickerContainer>\n            );\n          })()\n        : undefined}\n      {dailyHighchartsOptions !== undefined\n        ? dailyHighchartsOptions.map((pageGroup) => (\n            <PageGroup key={`page-group-${pageGroup[0].title}`}>\n              {pageGroup\n                .concat(\n                  // Concatenate dummy charts to fill up each page of 3. This ensures that 1 or\n                  // 2 charts on a page is always layed out the same way incrementally as a 3-chart\n                  // page. This is for print consistency when have 1 day, then 2, then 3 on a page.\n                  new Array(nChartsPerPage - pageGroup.length).fill({\n                    ...pageGroup[0],\n                    hidden: true,\n                    options: {\n                      ...pageGroup[0].options,\n                      chart: {\n                        ...pageGroup[0].options.chart,\n                        // Don't invoke any load events for the page-filler items\n                        events: {},\n                      },\n                    },\n                  }),\n                )\n                .map(({ hidden = false, title, options }, i) => {\n                  return (\n                    <ChartContainer\n                      className={hidden ? 'hidden' : 'visible'}\n                      key={i}\n                    >\n                      <ChartHeading>{title}</ChartHeading>\n                      <Chart>\n                        <HighchartsReact\n                          highcharts={Highcharts}\n                          key={`chart-${title}`}\n                          options={options}\n                        />\n                      </Chart>\n                    </ChartContainer>\n                  );\n                })}\n            </PageGroup>\n          ))\n        : undefined}\n    </ChartsContainer>\n  );\n};\n\nfunction createHighchartsOptionsOverall(\n  timezone: string,\n  data: [number, number][],\n): Highcharts.Options {\n  return {\n    chart: {\n      height: 225,\n      margin: [15, 0, 30, 40],\n      style: {\n        fontFamily: 'Poppins',\n      },\n      type: 'spline',\n    },\n    colors: ['rgba(255, 102, 102, 1)'],\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        gapSize: 30 * 60 * 1000,\n        gapUnit: 'value',\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    series: [\n      {\n        data,\n        name: 'mmol/L',\n        type: 'spline',\n      },\n    ],\n    time: {\n      moment,\n      timezone,\n    },\n    title: {\n      text: '',\n    },\n    xAxis: {\n      dateTimeLabelFormats: {\n        day: \"%e. %b '%y\",\n        week: \"%e. %b '%y\",\n      },\n      type: 'datetime',\n    },\n    yAxis: {\n      tickInterval: 0.5,\n      title: {\n        text: '',\n      },\n    },\n  };\n}\n\nfunction createHighchartsOptionsForDay(\n  timezone: string,\n  data: [number, number][],\n  xMinMax: { min: number; max: number },\n  yMinMax: {\n    min: number;\n    max: number;\n  },\n): Highcharts.Options {\n  const values = data.map((p) => p[1]);\n  const dayMax = Math.max(...values);\n  const dayAvg =\n    values.length > 0\n      ? Math.round(\n          (values.reduce((acc, v) => acc + v, 0) * 10) / values.length,\n        ) / 10\n      : undefined;\n  const dayMin = Math.min(...values);\n  const labels: Highcharts.SVGElement[] = [];\n\n  return {\n    chart: {\n      events: {\n        render() {\n          labels.forEach((l) => l.destroy());\n          labels.length = 0;\n\n          const chartPaddingTop = 28.5;\n          const lineHeight = 18.5;\n          const labelX = 45;\n          const valueX = labelX + 140;\n\n          const attrs = {\n            fill: '#999',\n            'font-weight': '600',\n            zIndex: 1,\n          };\n\n          if (dayAvg !== undefined && dayMax !== undefined) {\n            const maxLabel = this.renderer.text('MAXIMUM GLUCOSE:', 0).add();\n            maxLabel.attr({\n              ...attrs,\n              x: labelX,\n              y: chartPaddingTop,\n            });\n            const maxValue = this.renderer.text(dayMax.toString(), 0).add();\n            maxValue.attr({\n              ...attrs,\n              x: valueX,\n              y: chartPaddingTop,\n            });\n\n            const avgLabel = this.renderer.text('AVERAGE GLUCOSE:', 0).add();\n            avgLabel.attr({\n              ...attrs,\n              x: labelX,\n              y: chartPaddingTop + lineHeight,\n            });\n            const avgValue = this.renderer.text(dayAvg.toString(), 0).add();\n\n            avgValue.attr({\n              ...attrs,\n              x: valueX,\n              y: chartPaddingTop + lineHeight,\n            });\n\n            labels.push(maxLabel, maxValue, avgLabel, avgValue);\n          }\n        },\n      },\n      height: 225,\n      margin: [15, 0, 30, 40],\n      style: {\n        fontFamily: 'Poppins',\n      },\n      type: 'spline',\n    },\n    colors: ['rgba(255, 102, 102, 1)'],\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        gapSize: 30 * 60 * 1000,\n        gapUnit: 'value',\n        marker: {\n          enabled: true,\n          radius: 2,\n        },\n      },\n    },\n    series: [\n      {\n        data,\n        name: 'mmol/L',\n        type: 'spline',\n      },\n    ],\n    time: {\n      moment,\n      timezone,\n    },\n    title: {\n      text: '',\n    },\n    xAxis: {\n      ...xMinMax,\n      dateTimeLabelFormats: {\n        day: '%H:%M',\n      },\n      type: 'datetime',\n    },\n    yAxis: {\n      ...yMinMax,\n      plotBands: [\n        {\n          color: 'rgba(87, 220, 140, 0.2)',\n          from: 4.1,\n          to: 6,\n        },\n      ],\n      plotLines: _.compact([\n        dayMax !== undefined\n          ? {\n              color: '#aaa',\n              dashStyle: 'Dot',\n              value: dayMax,\n              width: 2,\n              zIndex: 2,\n            }\n          : undefined,\n        {\n          color: '#aaa',\n          dashStyle: 'Dash',\n          value: 5,\n          width: 4,\n          zIndex: 2,\n        },\n        dayMin !== undefined\n          ? {\n              color: '#aaa',\n              dashStyle: 'Dot',\n              value: dayMin,\n              width: 2,\n              zIndex: 2,\n            }\n          : undefined,\n      ]),\n      tickInterval: 0.5,\n      title: {\n        text: '',\n      },\n    },\n  };\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type FileType = 'image' | 'csv';\n\nexport type File = {\n  contentType: string;\n  data: string;\n  name: string;\n  size: number;\n  type: FileType;\n};\n\nexport type ProcessedFiles = {\n  files: File[];\n  unsupported: string[];\n};\n\nexport const FileStoreContext = React.createContext<FileStore>(\n  (undefined as unknown) as FileStore,\n);\n\nexport class FileStore {\n  private readonly files$$ = new BehaviorSubject<File[]>([]);\n  public readonly files$ = this.files$$.asObservable();\n\n  public filesByType$(type: FileType): Observable<File[]> {\n    return this.files$.pipe(map((fs) => fs.filter((f) => f.type === type)));\n  }\n\n  public async preProcessFiles(fileList: FileList): Promise<ProcessedFiles> {\n    const files: File[] = [];\n    const unsupported: string[] = [];\n\n    for (let i = 0; i < fileList.length; i++) {\n      const fileListItem = fileList.item(i);\n      if (fileListItem !== null) {\n        const file = await this.preProcessFileData(\n          fileListItem.name,\n          fileListItem.type,\n          () => fileListItem.arrayBuffer(),\n        );\n\n        if (file !== undefined) {\n          files.push(file);\n        } else {\n          unsupported.push(fileListItem.name);\n        }\n      }\n    }\n    return { files, unsupported };\n  }\n\n  public async preProcessUrl(url: string): Promise<ProcessedFiles> {\n    const response = await fetch(url);\n    const contentType = response.headers.get('content-type');\n    const name = url.split('?')[0].split('/').slice(-1)[0];\n    const file = await this.preProcessFileData(\n      name,\n      contentType === null ? 'application/octet-stream' : contentType,\n      () => response.arrayBuffer(),\n    );\n    if (file !== undefined) {\n      return { files: [file], unsupported: [] };\n    } else {\n      return { files: [], unsupported: [url] };\n    }\n  }\n\n  public async acceptFiles(files: File[]): Promise<void> {\n    this.files$$.next(\n      _.chain(this.files$$.value).concat(files).uniqBy('data').value(),\n    );\n  }\n\n  private async preProcessFileData(\n    name: string,\n    contentType: string,\n    readData: () => Promise<ArrayBuffer>,\n  ): Promise<File | undefined> {\n    const type = resolveFileType(name, contentType);\n    if (type !== undefined) {\n      const buffer = await readData();\n      const data = base64EncodeBuffer(buffer);\n      const size = buffer.byteLength;\n      return { contentType, data, name, size, type };\n    } else {\n      return undefined;\n    }\n  }\n}\n\nfunction base64EncodeBuffer(buf: ArrayBuffer): string {\n  return btoa(\n    new Uint8Array(buf).reduce(\n      (str, byte) => str + String.fromCharCode(byte),\n      '',\n    ),\n  );\n}\n\nfunction resolveFileType(\n  name: string,\n  contentType: string,\n): FileType | undefined {\n  if (contentType.startsWith('text/csv')) {\n    return 'csv';\n  } else if (contentType.startsWith('image/')) {\n    return 'image';\n  } else if (contentType.startsWith('text/') && name.endsWith('csv')) {\n    return 'csv';\n  } else {\n    return undefined;\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useObservable } from '../hooks/useObservable';\nimport { FileStoreContext } from '../services/FileStore';\n\nconst Container = styled.div`\n  min-height: 100%;\n  min-width: 100%;\n  position: relative;\n`;\n\nexport const FileDropZone: React.FC = ({ children }) => {\n  const fileService = React.useContext(FileStoreContext);\n  const [files] = useObservable(() => fileService.files$, [fileService], []);\n  const [fileUploadEl, setFileUploadEl] = React.useState<HTMLInputElement>();\n  const handleSelectFiles = React.useCallback(\n    async (files: FileList) => {\n      const preProcessed = await fileService.preProcessFiles(files);\n      await fileService.acceptFiles(preProcessed.files);\n    },\n    [fileService],\n  );\n\n  return (\n    <Container\n      onClick={() =>\n        files.length === 0 && fileUploadEl !== undefined\n          ? fileUploadEl.click()\n          : undefined\n      }\n      onDragOver={(ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }}\n      onDrop={(ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        void handleSelectFiles(ev.dataTransfer.files);\n      }}\n      style={{\n        cursor: files.length === 0 ? 'pointer' : undefined,\n      }}\n    >\n      <input\n        multiple\n        onChange={(ev) => {\n          const files = ev.target.files;\n          if (files !== null && files.length > 0) {\n            void handleSelectFiles(files);\n          }\n        }}\n        ref={(el) => (el !== null ? setFileUploadEl(el) : undefined)}\n        style={{ display: 'none' }}\n        type=\"file\"\n      />\n      {children}\n    </Container>\n  );\n};\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nimport { Charts } from './components/Charts';\nimport { FileDropZone } from './components/FileDropZone';\nimport { useObservable } from './hooks/useObservable';\nimport { FileStore, FileStoreContext } from './services/FileStore';\nimport { MetricsStore, MetricsStoreContext } from './services/MetricsStore';\n\nconst GlobalStyle = createGlobalStyle`\n  /* Global reset to remove all browser styling. */\n  ${reset}\n\n  @page {\n    margin: 0;\n    size: landscape;\n  }\n\n  html,\n  body,\n  #root {\n    height: 100%;\n    width: 100%;\n  }\n\n  body {\n    font-family: 'Poppins', 'Roboto', 'Helvetica Neue', sans-serif;\n  }\n\n  #charts-for-print {\n    display: none;\n  }\n\n  @media print {\n    #charts-for-print {\n      display: block;\n    }\n\n    #charts-without-print {\n      display: none;\n    }\n\n    button.print {\n      display: none;\n    }\n  }\n`;\n\nconst Fullscreen = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  min-height: 100%;\n  position: absolute;\n  min-width: 100%;\n`;\n\nexport type AppProps = {\n  dataUrl: string | undefined;\n};\n\nconst App: React.FC<AppProps> = ({ dataUrl }) => {\n  const [fileStore] = React.useState(() => new FileStore());\n  const [metricsStore] = React.useState(() => new MetricsStore(fileStore));\n  const [csvFiles] = useObservable(\n    () => fileStore.filesByType$('csv'),\n    [fileStore],\n    [],\n  );\n\n  React.useEffect(() => {\n    if (dataUrl !== undefined) {\n      void (async () => {\n        const { files } = await fileStore.preProcessUrl(dataUrl);\n        await fileStore.acceptFiles(files);\n      })();\n    }\n  }, [dataUrl, fileStore]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <FileStoreContext.Provider value={fileStore}>\n        <MetricsStoreContext.Provider value={metricsStore}>\n          <FileDropZone>\n            {csvFiles.length > 0 ? (\n              <Charts timezone=\"America/Toronto\" />\n            ) : dataUrl === undefined ? (\n              <Fullscreen>\n                <span>\n                  Drag and drop a Blood Glucose CSV file to view charts.\n                </span>\n              </Fullscreen>\n            ) : (\n              <Fullscreen>\n                <span>Downloading data...</span>\n              </Fullscreen>\n            )}\n          </FileDropZone>\n        </MetricsStoreContext.Provider>\n      </FileStoreContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      },\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import * as Highcharts from 'highcharts';\nimport brokenAxis from 'highcharts/modules/broken-axis';\n\n/** React date range styles. */\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\n/** Highcharts setup. */\nbrokenAxis(Highcharts);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './setupVendorLibraries';\n\nconst qs = new URLSearchParams(window.location.search);\nconst dataUrl = qs.get('dataUrl');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App dataUrl={typeof dataUrl === 'string' ? dataUrl : undefined} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}