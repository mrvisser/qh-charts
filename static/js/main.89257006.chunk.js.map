{"version":3,"sources":["hooks/useObservable.ts","services/MetricsStore.ts","components/Charts.tsx","services/FileStore.ts","components/FileDropZone.tsx","App.tsx","reportWebVitals.ts","setupHighcharts.ts","index.tsx"],"names":["useObservable","observableGenerator","deps","initialValue","React","useState","value","setValue","cb","useCallback","useEffect","o","undefined","sub","subscribe","error","err","console","next","unsubscribe","MetricsStoreContext","createContext","MetricsStore","fileStore","bloodGlucose$","this","filesByType$","pipe","concatMap","files","of","Promise","resolve","a","csvs","map","file","data","atob","bytes","Uint8Array","length","i","charCodeAt","TextDecoder","decode","all","parseBloodGlucoseCsv","timeValuesArr","timeValues","reduce","acc","m","Object","keys","timeStr","str","time","moment","tz","toDate","sort","b","getTime","fn","input","accept","reject","csvParse","split","slice","join","columns","records","result","record","parseValue","parseFloat","isNaN","ChartHeading","styled","h2","Charts","metricsStore","useContext","ms","_","chain","groupBy","format","toPairs","day","sortBy","bloodGlucoseData","highchartsOptions","setHighchartsOptions","allValues","flatMap","bg","p","min","Math","yMinMax","max","options","createHighchartsOptionsForDay","endOf","startOf","title","highcharts","Highcharts","xMinMax","chart","type","colors","legend","enabled","plotOptions","series","gapSize","gapUnit","marker","radius","name","text","xAxis","dateTimeLabelFormats","labels","rotation","yAxis","plotBands","color","from","to","tickInterval","FileStoreContext","FileStore","files$$","BehaviorSubject","files$","asObservable","fs","filter","f","fileList","unsupported","fileListItem","item","contentType","startsWith","arrayBuffer","buffer","btoa","byte","String","fromCharCode","size","byteLength","push","concat","uniqBy","Container","div","FileDropZone","children","fileService","onDragOver","ev","preventDefault","stopPropagation","onDrop","preProcessFiles","dataTransfer","preProcessed","acceptFiles","GlobalStyle","createGlobalStyle","reset","Centered","App","csvFiles","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","brokenAxis","timezoneOffset","getTimezoneOffset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89257006.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Observable } from 'rxjs';\n\nexport type ObserverFunction<T> = () => Observable<T> | undefined;\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n): [T | undefined];\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue: T,\n): [T];\n\n/**\n * A custom hook that exposes an observable as its latest emitted value.\n *\n * @param observableGenerator A factory function for the observable\n * @param deps The dependency array. When any of these dependencies changes, the observable will\n *   be regenerated.\n * @param initialValue The initial value of the observable value, before it emits its first value.\n *   When the dependency array changes, the value will not revert to the initial value.\n * @returns\n */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue?: T,\n): [typeof initialValue] {\n  const [value, setValue] = React.useState<T | typeof initialValue>(\n    initialValue,\n  );\n  const cb = React.useCallback(observableGenerator, deps);\n\n  /** When the callback changes, reinvoke it and subscribe to the new observable. */\n  React.useEffect(() => {\n    const o = cb();\n    if (o !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      const sub = o.subscribe({\n        // eslint-disable-next-line no-console\n        error: (err) => console.error(err),\n        next: setValue,\n      });\n      return () => sub.unsubscribe();\n    }\n  }, [cb]);\n\n  return [value];\n}\n","import csvParse from 'csv-parse';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { Observable, of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nimport { FileStore } from './FileStore';\n\nexport type MetricValue<T> = {\n  time: Date;\n  value: T;\n};\n\ntype CsvRecord = {\n  'Device Timestamp': string;\n  'Record Type': string;\n  'Historic Glucose mmol/L': string;\n  'Scan Glucose mmol/L': string;\n};\n\nexport const MetricsStoreContext = React.createContext<MetricsStore>(\n  (undefined as unknown) as MetricsStore,\n);\n\nexport class MetricsStore {\n  constructor(private readonly fileStore: FileStore) {}\n\n  /** Observe changes to the blood glucose metrics. */\n  public readonly bloodGlucose$: Observable<\n    MetricValue<number>[] | undefined\n  > = this.fileStore\n    .filesByType$('csv')\n    .pipe(\n      concatMap((files) =>\n        of<() => Promise<MetricValue<number>[] | undefined>>(\n          () => Promise.resolve(undefined),\n          async () => {\n            const csvs = files.map((file) => {\n              const data = atob(file.data);\n              const bytes = new Uint8Array(data.length);\n              for (let i = 0; i < data.length; i++) {\n                bytes[i] = data.charCodeAt(i);\n              }\n              return new TextDecoder('utf-8').decode(bytes);\n            });\n            const timeValuesArr: Record<string, number>[] = await Promise.all(\n              csvs.map(parseBloodGlucoseCsv),\n            );\n            const timeValues = timeValuesArr.reduce(\n              (acc, m) => ({ ...acc, ...m }),\n              {},\n            );\n            return Object.keys(timeValues)\n              .map((timeStr) => {\n                const value = timeValues[timeStr];\n                const time = parseTime(timeStr);\n                return { time, value };\n              })\n              .sort((a, b) => a.time.getTime() - b.time.getTime());\n          },\n        ),\n      ),\n    )\n    .pipe(concatMap((fn) => fn()));\n}\n\nfunction parseBloodGlucoseCsv(input: string): Promise<Record<string, number>> {\n  return new Promise((accept, reject) => {\n    csvParse(\n      input.split('\\n').slice(1).join('\\n'),\n      { columns: true },\n      (err, records: CsvRecord[]) => {\n        if (err !== undefined) {\n          return reject(err);\n        }\n\n        const result: Record<string, number> = {};\n        for (const record of records) {\n          const value = parseValue(record);\n          if (value !== undefined) {\n            result[record['Device Timestamp']] = value;\n          }\n        }\n\n        accept(result);\n      },\n    );\n  });\n}\n\nfunction parseTime(str: string): Date {\n  return moment.tz(str, 'DD-MM-YYYY HH:mm', 'America/Toronto').toDate();\n}\n\nfunction parseValue(record: CsvRecord): number | undefined {\n  const value =\n    record['Record Type'] === '0'\n      ? parseFloat(record['Historic Glucose mmol/L'])\n      : parseFloat(record['Scan Glucose mmol/L']);\n  if (!isNaN(value)) {\n    return value;\n  } else {\n    return undefined;\n  }\n}\n","import * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { map } from 'rxjs/operators';\nimport styled from 'styled-components';\n\nimport { useObservable } from '../hooks/useObservable';\nimport { MetricsStoreContext } from '../services/MetricsStore';\n\nconst ChartHeading = styled.h2`\n  font-weight: 500;\n  text-align: center;\n  text-transform: 'uppercase';\n`;\n\nexport const Charts: React.FC = () => {\n  const metricsStore = React.useContext(MetricsStoreContext);\n  const [bloodGlucoseData] = useObservable(\n    () =>\n      metricsStore.bloodGlucose$\n        .pipe(\n          map((ms) =>\n            ms !== undefined\n              ? ms.map(({ time, value }) => [time.getTime(), value] as const)\n              : undefined,\n          ),\n        )\n        .pipe(\n          map((ms) => {\n            if (ms !== undefined) {\n              return _.chain(ms)\n                .groupBy(([time]) => moment(time).format('YYYY-MM-DD'))\n                .toPairs()\n                .map(([day, data]) => ({ data, day }))\n                .sortBy('day')\n                .value();\n            } else {\n              return undefined;\n            }\n          }),\n        ),\n    [metricsStore],\n  );\n  const [highchartsOptions, setHighchartsOptions] = React.useState<\n    {\n      title: string;\n      options: Highcharts.Options;\n    }[]\n  >();\n\n  React.useEffect(() => {\n    if (bloodGlucoseData !== undefined) {\n      const allValues = bloodGlucoseData.flatMap((bg) =>\n        bg.data.map((p) => p[1]),\n      );\n      const min = Math.min(4, ...allValues);\n      const max = Math.max(7, ...allValues);\n      const yMinMax = { max, min };\n      setHighchartsOptions(\n        bloodGlucoseData.map(({ data, day }) => {\n          const m = moment.tz(day, 'America/Toronto');\n          const xMinMax = {\n            max: m.endOf('day').toDate().getTime(),\n            min: m.startOf('day').toDate().getTime(),\n          };\n          return {\n            options: createHighchartsOptionsForDay(data, xMinMax, yMinMax),\n            title: m.format('dddd, MMMM, Do'),\n          };\n        }),\n      );\n    } else {\n      setHighchartsOptions(undefined);\n    }\n  }, [bloodGlucoseData]);\n\n  return (\n    <div>\n      {highchartsOptions !== undefined\n        ? highchartsOptions.map(({ title, options }) => {\n            return (\n              <div key={title}>\n                <ChartHeading>{title}</ChartHeading>\n                <HighchartsReact highcharts={Highcharts} options={options} />\n              </div>\n            );\n          })\n        : undefined}\n    </div>\n  );\n};\n\nfunction createHighchartsOptionsForDay(\n  data: (readonly [number, number])[],\n  xMinMax: { min: number; max: number },\n  yMinMax: {\n    min: number;\n    max: number;\n  },\n): Highcharts.Options {\n  return {\n    chart: {\n      type: 'spline',\n    },\n    colors: ['rgba(255, 102, 102, 1)'],\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        gapSize: 30 * 60 * 1000,\n        gapUnit: 'value',\n        marker: {\n          enabled: true,\n          radius: 3,\n        },\n      },\n    },\n    series: [\n      {\n        data,\n        name: 'mmol/L',\n        type: 'spline',\n      },\n    ],\n    title: {\n      text: '',\n    },\n    xAxis: {\n      ...xMinMax,\n      dateTimeLabelFormats: {\n        day: '%H:%M',\n      },\n      labels: {\n        rotation: -45,\n      },\n      type: 'datetime',\n    },\n    yAxis: {\n      ...yMinMax,\n      plotBands: [\n        {\n          color: 'rgba(87, 220, 140, 0.2)',\n          from: 4.1,\n          to: 6,\n        },\n      ],\n      tickInterval: 0.5,\n      title: {\n        text: '',\n      },\n    },\n  };\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type FileType = 'image' | 'csv';\n\nexport type File = {\n  contentType: string;\n  data: string;\n  name: string;\n  size: number;\n  type: FileType;\n};\n\nexport type ProcessedFiles = {\n  files: File[];\n  unsupported: globalThis.File[];\n};\n\nexport const FileStoreContext = React.createContext<FileStore>(\n  (undefined as unknown) as FileStore,\n);\n\nexport class FileStore {\n  private readonly files$$ = new BehaviorSubject<File[]>([]);\n  public readonly files$ = this.files$$.asObservable();\n\n  public filesByType$(type: FileType): Observable<File[]> {\n    return this.files$.pipe(map((fs) => fs.filter((f) => f.type === type)));\n  }\n\n  public async preProcessFiles(fileList: FileList): Promise<ProcessedFiles> {\n    const files: File[] = [];\n    const unsupported: globalThis.File[] = [];\n\n    for (let i = 0; i < fileList.length; i++) {\n      const fileListItem = fileList.item(i);\n      if (fileListItem !== null) {\n        const contentType = fileListItem.type;\n        const type = contentType.startsWith('image/')\n          ? 'image'\n          : contentType === 'text/csv'\n          ? 'csv'\n          : undefined;\n        if (type !== undefined) {\n          const buffer = await fileListItem.arrayBuffer();\n          const data = base64EncodeBuffer(buffer);\n          const name = fileListItem.name;\n          const size = buffer.byteLength;\n          files.push({\n            contentType,\n            data,\n            name,\n            size,\n            type,\n          });\n        } else {\n          unsupported.push(fileListItem);\n        }\n      }\n    }\n    return { files, unsupported };\n  }\n\n  public async acceptFiles(files: File[]): Promise<void> {\n    this.files$$.next(\n      _.chain(this.files$$.value).concat(files).uniqBy('data').value(),\n    );\n  }\n}\n\nfunction base64EncodeBuffer(buf: ArrayBuffer): string {\n  return btoa(\n    new Uint8Array(buf).reduce(\n      (str, byte) => str + String.fromCharCode(byte),\n      '',\n    ),\n  );\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { FileStoreContext } from '../services/FileStore';\n\nconst Container = styled.div`\n  min-height: 100%;\n  min-width: 100%;\n  position: relative;\n`;\n\nexport const FileDropZone: React.FC = ({ children }) => {\n  const fileService = React.useContext(FileStoreContext);\n  return (\n    <Container\n      onDragOver={(ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }}\n      onDrop={async (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const preProcessed = await fileService.preProcessFiles(\n          ev.dataTransfer.files,\n        );\n        await fileService.acceptFiles(preProcessed.files);\n      }}\n    >\n      {children}\n    </Container>\n  );\n};\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nimport { Charts } from './components/Charts';\nimport { FileDropZone } from './components/FileDropZone';\nimport { useObservable } from './hooks/useObservable';\nimport { FileStore, FileStoreContext } from './services/FileStore';\nimport { MetricsStore, MetricsStoreContext } from './services/MetricsStore';\n\nconst GlobalStyle = createGlobalStyle`\n  /* Global reset to remove all browser styling. */\n  ${reset}\n\n  html,\n  body,\n  #root {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst Centered = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  position: absolute;\n  width: 100%;\n`;\n\nconst App: React.FC = () => {\n  const [fileStore] = React.useState(() => new FileStore());\n  const [metricsStore] = React.useState(() => new MetricsStore(fileStore));\n  const [csvFiles] = useObservable(\n    () => fileStore.filesByType$('csv'),\n    [fileStore],\n    [],\n  );\n\n  return (\n    <>\n      <GlobalStyle />\n      <FileStoreContext.Provider value={fileStore}>\n        <MetricsStoreContext.Provider value={metricsStore}>\n          <FileDropZone>\n            {csvFiles.length > 0 ? (\n              <Charts />\n            ) : (\n              <Centered>\n                <span>\n                  Drag and drop a CSV file to graph it. Add as many as you like.\n                </span>\n              </Centered>\n            )}\n          </FileDropZone>\n        </MetricsStoreContext.Provider>\n      </FileStoreContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      },\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import * as Highcharts from 'highcharts';\nimport brokenAxis from 'highcharts/modules/broken-axis';\nimport moment from 'moment-timezone';\n\nbrokenAxis(Highcharts);\nHighcharts.setOptions({\n  time: {\n    timezoneOffset: moment.tz('America/Toronto').toDate().getTimezoneOffset(),\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './setupHighcharts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}