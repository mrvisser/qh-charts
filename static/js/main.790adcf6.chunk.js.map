{"version":3,"sources":["hooks/useObservable.ts","services/MetricsStore.ts","components/Charts.tsx","services/FileStore.ts","components/FileDropZone.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useObservable","observableGenerator","deps","initialValue","React","useState","value","setValue","cb","useCallback","useEffect","o","undefined","sub","subscribe","error","err","console","next","unsubscribe","MetricsStoreContext","createContext","MetricsStore","fileStore","bloodGlucose$","this","filesByType$","pipe","concatMap","files","of","Promise","resolve","a","csvs","map","file","data","atob","bytes","Uint8Array","length","i","charCodeAt","TextDecoder","decode","all","parseBloodGlucoseCsv","timeValuesArr","timeValues","reduce","acc","m","Object","keys","timeStr","str","time","moment","tz","toDate","sort","b","getTime","fn","input","accept","reject","csvParse","split","slice","join","columns","records","result","record","parseValue","parseFloat","isNaN","Charts","metricsStore","useContext","ms","_","chain","groupBy","format","toPairs","day","sortBy","bloodGlucoseData","highcharts","Highcharts","options","chart","type","colors","plotOptions","series","marker","enabled","name","title","text","xAxis","yAxis","max","min","FileStoreContext","FileStore","files$$","BehaviorSubject","files$","asObservable","fs","filter","f","fileList","unsupported","fileListItem","item","contentType","startsWith","arrayBuffer","buffer","btoa","byte","String","fromCharCode","size","byteLength","push","concat","uniqBy","Container","styled","div","FileDropZone","children","fileService","onDragOver","ev","preventDefault","stopPropagation","onDrop","preProcessFiles","dataTransfer","preProcessed","acceptFiles","GlobalStyle","createGlobalStyle","reset","timezoneOffset","getTimezoneOffset","Centered","App","csvFiles","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.790adcf6.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Observable } from 'rxjs';\n\nexport type ObserverFunction<T> = () => Observable<T> | undefined;\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n): [T | undefined];\n\n/** @see [useObservable(observableGenerator, deps, initialvalue?)] */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue: T,\n): [T];\n\n/**\n * A custom hook that exposes an observable as its latest emitted value.\n *\n * @param observableGenerator A factory function for the observable\n * @param deps The dependency array. When any of these dependencies changes, the observable will\n *   be regenerated.\n * @param initialValue The initial value of the observable value, before it emits its first value.\n *   When the dependency array changes, the value will not revert to the initial value.\n * @returns\n */\nexport function useObservable<T>(\n  observableGenerator: ObserverFunction<T>,\n  deps: React.DependencyList,\n  initialValue?: T,\n): [typeof initialValue] {\n  const [value, setValue] = React.useState<T | typeof initialValue>(\n    initialValue,\n  );\n  const cb = React.useCallback(observableGenerator, deps);\n\n  /** When the callback changes, reinvoke it and subscribe to the new observable. */\n  React.useEffect(() => {\n    const o = cb();\n    if (o !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      const sub = o.subscribe({\n        // eslint-disable-next-line no-console\n        error: (err) => console.error(err),\n        next: setValue,\n      });\n      return () => sub.unsubscribe();\n    }\n  }, [cb]);\n\n  return [value];\n}\n","import csvParse from 'csv-parse';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { Observable, of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nimport { FileStore } from './FileStore';\n\nexport type MetricValue<T> = {\n  time: Date;\n  value: T;\n};\n\ntype CsvRecord = {\n  'Device Timestamp': string;\n  'Record Type': string;\n  'Historic Glucose mmol/L': string;\n  'Scan Glucose mmol/L': string;\n};\n\nexport const MetricsStoreContext = React.createContext<MetricsStore>(\n  (undefined as unknown) as MetricsStore,\n);\n\nexport class MetricsStore {\n  constructor(private readonly fileStore: FileStore) {}\n\n  /** Observe changes to the blood glucose metrics. */\n  public readonly bloodGlucose$: Observable<\n    MetricValue<number>[] | undefined\n  > = this.fileStore\n    .filesByType$('csv')\n    .pipe(\n      concatMap((files) =>\n        of<() => Promise<MetricValue<number>[] | undefined>>(\n          () => Promise.resolve(undefined),\n          async () => {\n            const csvs = files.map((file) => {\n              const data = atob(file.data);\n              const bytes = new Uint8Array(data.length);\n              for (let i = 0; i < data.length; i++) {\n                bytes[i] = data.charCodeAt(i);\n              }\n              return new TextDecoder('utf-8').decode(bytes);\n            });\n            const timeValuesArr: Record<string, number>[] = await Promise.all(\n              csvs.map(parseBloodGlucoseCsv),\n            );\n            const timeValues = timeValuesArr.reduce(\n              (acc, m) => ({ ...acc, ...m }),\n              {},\n            );\n            return Object.keys(timeValues)\n              .map((timeStr) => {\n                const value = timeValues[timeStr];\n                const time = parseTime(timeStr);\n                return { time, value };\n              })\n              .sort((a, b) => a.time.getTime() - b.time.getTime());\n          },\n        ),\n      ),\n    )\n    .pipe(concatMap((fn) => fn()));\n}\n\nfunction parseBloodGlucoseCsv(input: string): Promise<Record<string, number>> {\n  return new Promise((accept, reject) => {\n    csvParse(\n      input.split('\\n').slice(1).join('\\n'),\n      { columns: true },\n      (err, records: CsvRecord[]) => {\n        if (err !== undefined) {\n          return reject(err);\n        }\n\n        const result: Record<string, number> = {};\n        for (const record of records) {\n          const value = parseValue(record);\n          if (value !== undefined) {\n            result[record['Device Timestamp']] = value;\n          }\n        }\n\n        accept(result);\n      },\n    );\n  });\n}\n\nfunction parseTime(str: string): Date {\n  return moment.tz(str, 'DD-MM-YYYY HH:mm', 'America/Toronto').toDate();\n}\n\nfunction parseValue(record: CsvRecord): number | undefined {\n  const value =\n    record['Record Type'] === '0'\n      ? parseFloat(record['Historic Glucose mmol/L'])\n      : parseFloat(record['Scan Glucose mmol/L']);\n  if (!isNaN(value)) {\n    return value;\n  } else {\n    return undefined;\n  }\n}\n","import * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport { map } from 'rxjs/operators';\n\nimport { useObservable } from '../hooks/useObservable';\nimport { MetricsStoreContext } from '../services/MetricsStore';\n\nexport const Charts: React.FC = () => {\n  const metricsStore = React.useContext(MetricsStoreContext);\n  const [bloodGlucoseData] = useObservable(\n    () =>\n      metricsStore.bloodGlucose$\n        .pipe(\n          map((ms) =>\n            ms !== undefined\n              ? ms.map(({ time, value }) => [time.getTime(), value] as const)\n              : undefined,\n          ),\n        )\n        .pipe(\n          map((ms) => {\n            if (ms !== undefined) {\n              return _.chain(ms)\n                .groupBy(([time]) => moment(time).format('YYYY-MM-DD'))\n                .toPairs()\n                .map(([day, data]) => ({ data, day }))\n                .sortBy('day')\n                .value();\n            } else {\n              return undefined;\n            }\n          }),\n        ),\n    [metricsStore],\n  );\n  return (\n    <div>\n      {bloodGlucoseData !== undefined\n        ? bloodGlucoseData.map(({ day, data }) => {\n            return (\n              <div key={day}>\n                <h2>\n                  {moment.tz(day, 'America/Toronto').format('dddd, MMMM Do')}\n                </h2>\n                <HighchartsReact\n                  highcharts={Highcharts}\n                  options={{\n                    chart: {\n                      type: 'spline',\n                    },\n                    colors: ['#6CF', '#39F', '#06C', '#036', '#000'],\n                    plotOptions: {\n                      series: {\n                        marker: {\n                          enabled: true,\n                        },\n                      },\n                    },\n                    series: [\n                      {\n                        data,\n                        name: 'Blood Glucose',\n                      },\n                    ],\n                    title: {\n                      text: '',\n                    },\n                    xAxis: {\n                      type: 'datetime',\n                    },\n                    yAxis: {\n                      max: 10,\n                      min: 2,\n                      title: {\n                        text: 'Blood Glucose (mmol/L)',\n                      },\n                    },\n                  }}\n                />\n              </div>\n            );\n          })\n        : undefined}\n    </div>\n  );\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type FileType = 'image' | 'csv';\n\nexport type File = {\n  contentType: string;\n  data: string;\n  name: string;\n  size: number;\n  type: FileType;\n};\n\nexport type ProcessedFiles = {\n  files: File[];\n  unsupported: globalThis.File[];\n};\n\nexport const FileStoreContext = React.createContext<FileStore>(\n  (undefined as unknown) as FileStore,\n);\n\nexport class FileStore {\n  private readonly files$$ = new BehaviorSubject<File[]>([]);\n  public readonly files$ = this.files$$.asObservable();\n\n  public filesByType$(type: FileType): Observable<File[]> {\n    return this.files$.pipe(map((fs) => fs.filter((f) => f.type === type)));\n  }\n\n  public async preProcessFiles(fileList: FileList): Promise<ProcessedFiles> {\n    const files: File[] = [];\n    const unsupported: globalThis.File[] = [];\n\n    for (let i = 0; i < fileList.length; i++) {\n      const fileListItem = fileList.item(i);\n      if (fileListItem !== null) {\n        const contentType = fileListItem.type;\n        const type = contentType.startsWith('image/')\n          ? 'image'\n          : contentType === 'text/csv'\n          ? 'csv'\n          : undefined;\n        if (type !== undefined) {\n          const buffer = await fileListItem.arrayBuffer();\n          const data = base64EncodeBuffer(buffer);\n          const name = fileListItem.name;\n          const size = buffer.byteLength;\n          files.push({\n            contentType,\n            data,\n            name,\n            size,\n            type,\n          });\n        } else {\n          unsupported.push(fileListItem);\n        }\n      }\n    }\n    return { files, unsupported };\n  }\n\n  public async acceptFiles(files: File[]): Promise<void> {\n    this.files$$.next(\n      _.chain(this.files$$.value).concat(files).uniqBy('data').value(),\n    );\n  }\n}\n\nfunction base64EncodeBuffer(buf: ArrayBuffer): string {\n  return btoa(\n    new Uint8Array(buf).reduce(\n      (str, byte) => str + String.fromCharCode(byte),\n      '',\n    ),\n  );\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { FileStoreContext } from '../services/FileStore';\n\nconst Container = styled.div`\n  min-height: 100%;\n  min-width: 100%;\n  position: relative;\n`;\n\nexport const FileDropZone: React.FC = ({ children }) => {\n  const fileService = React.useContext(FileStoreContext);\n  return (\n    <Container\n      onDragOver={(ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }}\n      onDrop={async (ev) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const preProcessed = await fileService.preProcessFiles(\n          ev.dataTransfer.files,\n        );\n        await fileService.acceptFiles(preProcessed.files);\n      }}\n    >\n      {children}\n    </Container>\n  );\n};\n","import * as Highcharts from 'highcharts';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nimport { Charts } from './components/Charts';\nimport { FileDropZone } from './components/FileDropZone';\nimport { useObservable } from './hooks/useObservable';\nimport { FileStore, FileStoreContext } from './services/FileStore';\nimport { MetricsStore, MetricsStoreContext } from './services/MetricsStore';\n\nconst GlobalStyle = createGlobalStyle`\n  /* Global reset to remove all browser styling. */\n  ${reset}\n\n  html,\n  body,\n  #root {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nHighcharts.setOptions({\n  time: {\n    timezoneOffset: moment.tz('America/Toronto').toDate().getTimezoneOffset(),\n  },\n});\n\nconst Centered = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  position: absolute;\n  width: 100%;\n`;\n\nconst App: React.FC = () => {\n  const [fileStore] = React.useState(() => new FileStore());\n  const [metricsStore] = React.useState(() => new MetricsStore(fileStore));\n  const [csvFiles] = useObservable(\n    () => fileStore.filesByType$('csv'),\n    [fileStore],\n    [],\n  );\n\n  return (\n    <>\n      <GlobalStyle />\n      <FileStoreContext.Provider value={fileStore}>\n        <MetricsStoreContext.Provider value={metricsStore}>\n          <FileDropZone>\n            {csvFiles.length > 0 ? (\n              <Charts />\n            ) : (\n              <Centered>\n                <span>\n                  Drag and drop a CSV file to graph it. Add as many as you like.\n                </span>\n              </Centered>\n            )}\n          </FileDropZone>\n        </MetricsStoreContext.Provider>\n      </FileStoreContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      },\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}